substitutions:
  friendly_name: Renovent Excellent 400 HRU
  device_name: hru-fan
  device_id: hru_fan
  device_description: Renovent Excellent 400 HRU Fan Override

esphome:
  name: ${device_name}
  comment: ${device_description}
  friendly_name: ${friendly_name}

esp8266:
  board: esp01_1m

# Enable logging
logger:
  baud_rate: 0 # Disable UART logging

# Enable Home Assistant API
api:
  encryption:
    key: !secret encryption_key

ota:
  - platform: esphome
    password: !secret ota_password

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  fast_connect: on # Don't scan networks, connect straight away
  manual_ip:
    static_ip: 10.0.20.12
    gateway: 10.0.0.1
    subnet: 255.255.0.0
  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: ${device_name}
    password: !secret fallback_ap_password

# Enable web server
web_server:
  port: 80

time:
  - platform: homeassistant
    id: homeassistant_time

# Relay outputs
# See: https://devices.esphome.io/devices/ESP-12F-Relay-X2
switch:
  - platform: gpio
    pin: GPIO5
    name: Fan Position 2
    id: relay_1
    interlock: [relay_2]
    internal: true
  - platform: gpio
    pin: GPIO4
    name: Fan Position 3
    id: relay_2
    interlock: [relay_1]
    internal: true
  - platform: restart
    name: "Restart"

# Represent the fan modes as a select component to match the eBUSd modes
select:
  - name: "Fan Mode Override"
    id: select_fan_mode_override
    platform: template
    initial_option: "Auto"
    optimistic: true
    icon: mdi:fan
    options:
      - "Auto"
      - "Normal"
      - "High"
    on_value:
      - lambda: !lambda |-
          if(id(select_fan_mode_override).state == "Normal") {
            id(relay_2).turn_off();
            id(relay_1).turn_on();
          } else if(id(select_fan_mode_override).state == "High") {
            id(relay_1).turn_off();
            id(relay_2).turn_on();
          } else {
            id(relay_1).turn_off();
            id(relay_2).turn_off();
          }

binary_sensor:
  - platform: status
    name: "Status"
    device_class: connectivity

sensor:
  - platform: wifi_signal
    name: "Wifi Signal"
    update_interval: 60s
    icon: mdi:wifi

  - platform: uptime
    name: "Uptime Seconds"
    update_interval: 60s
    icon: mdi:clock-outline
